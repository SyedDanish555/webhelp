#include <stdio.h>
#include <omp.h>
void floyd(int [10][10], int);
int min(int, int);
int main() {
 int n, a[10][10], i, j;
 printf("Enter the number of nodes: ");
 scanf("%d", &n);
 printf("\nEnter the cost adjacency matrix\n");
 for (i = 0; i < n; i++) {
 for (j = 0; j < n; j++) {
 scanf("%d", &a[i][j]);
 }
 }
 floyd(a, n);
 return 0;
}
void floyd(int a[10][10], int n) {
 int d[10][10], i, j, k;
 #pragma omp parallel for private(i, j)
 for (i = 0; i < n; i++) {
 for (j = 0; j < n; j++) {
 d[i][j] = a[i][j];
 }
 }
 #pragma omp parallel for private(i, j, k)
 for (k = 0; k < n; k++) {
 for (i = 0; i < n; i++) {
 for (j = 0; j < n; j++) {
 d[i][j] = min(d[i][j], d[i][k] + d[k][j]);
 }
 }
 }
 printf("\nThe distance matrix is\n");
 for (i = 0; i < n; i++) {
 for (j = 0; j < n; j++) {
 printf("%d\t", d[i][j]);
 }
 printf("\n");
 }
}
int min(int a, int b) {
 return (a < b) ? a : b;
}
